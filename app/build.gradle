apply plugin: 'com.android.application'

android {
    compileSdkVersion 19
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "net.programmierecke.radiodroid"
        minSdkVersion 9
        targetSdkVersion 17
        resValue 'string', 'app_name', 'RadioDroid'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    // https://stackoverflow.com/questions/24649240/build-release-apk-with-customize-name-format-in-android-studio
    // https://stackoverflow.com/questions/32092665/resolve-application-label-for-each-build-type/32220436#32220436
    // https://stackoverflow.com/questions/18332474/how-to-set-versionname-in-apk-filename-using-gradle
    // make apk filenames like "{app_name}-release-{number}.apk"
    android.applicationVariants.all { variant ->

        variant.outputs.each { output ->

            // get app_name field from defaultConfig
            def appName = variant.mergedFlavor.resValues.get('app_name').getValue()

            // concat new App name with each flavor's name
            appName = "${appName}"
            variant.productFlavors.each { flavor ->
                appName += "-${flavor.name}"
            }

            // optionally add buildType name
            appName += "-${variant.buildType.name}"

            // your requirement: if buildType == debug, add DEV to App name
            if (variant.buildType.name == "debug") {
                appName += "-DEV"
            }

            // if you want, you can set a new resValue
            // variant.resValue 'string', 'app_name', appName

            /*
             * Gets the git hash
             */

            def gitVersion = { ->
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-parse', '--short' ,'HEAD'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            }

//            def manifestParser = new com.android.builder.core.DefaultManifestParser()
//            def manifestVersionName = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
            def manifestVersionName = getVersionName()
            def finalName = appName + "-"
            if (!manifestVersionName.isEmpty()) {
                finalName += manifestVersionName + "."
            }
            finalName += variant.versionCode + "-" + gitVersion() + ".apk"
//            output.outputFileName = new File(output.outputFile.parent, finalName)
            output.outputFileName = finalName
        }
    }

}

dependencies {
    implementation 'com.android.support:support-v4:25.3.1'
    implementation 'com.google.code.gson:gson:2.8.5'
}
